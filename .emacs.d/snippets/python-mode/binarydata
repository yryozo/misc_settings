# -*- coding: utf-8; mode: snippet -*-
# name : binary data (バイナリデータの扱い(pack, unpack),  struct)
# --
import struct
 
${3:binstr} = struct.pack(${1:"!4i"}, ${2:val1, val2, ...})    # 値のバイナリ列への変換
$2    = struct.unpack($1, $3)  # バイナリ列から値への変換

# 備考: 変換方法はフォーマット文字列で指定.
#       書式は, 先頭の1文字がバイトオーダ指定文字 (省略可).
#       その後, 各値の変換方法を示す文字が繰り返し回数と共にならぶ.
# 
#       * バイトオーダ指定文字(省略可)
#         1文字目が以下の文字だとバイトオーダ指定だとみなされる (省略時のデフォルトは '@')
#         * @ 	ネイティブ (= sys.byteorder 依存) (バイトサイズとアラインメントもCコンパイラを模倣)
#         * = 	ネイティブ (= sys.byteorder 依存) (ただし, バイトサイズとアラインメントは標準のもの)
#         * < 	リトルエンディアン
#         * > 	ビッグエンディアン
#         * ! 	ネットワーク (= ビッグエンディアン) (ネットワークバイトオーダを忘れちゃった熱意に乏しい人向け)
# 
#       * 各値の変換方法を示す文字
#         なお, 同じ型が繰り返される場合, フォーマット文字の前に整数をつければいい.
#         (例えば, '4h' は 'hhhh' と全く同じ意味)
#         (ただし, s の場合だけは文字列のサイズとして扱われる. 例えば'10s'は10バイトの(1個の)文字列)
#         また, フォーマット文字間には (読みやすくなるよう) 任意にスペースを入れていい.
# 
#         | フォーマット | C での型              | Python 型        | 標準のサイズ | 備考     |
#	  |--------------+-----------------------+------------------+--------------+----------|
#	  | x            | パディングバイト      | 値なし           |              |          |
#	  | c            | char                  | 長さ 1 の文字列  |            1 |          |
#	  | b            | signed char           | 整数型 (integer) |            1 | (3)      |
#	  | B            | unsigned char         | 整数型           |            1 | (3)      |
#	  | ?            | _Bool                 | 真偽値型(bool)   |            1 | (1)      |
#	  | h            | short                 | 整数型           |            2 | (3)      |
#	  | H            | unsigned short        | 整数型           |            2 | (3)      |
#	  | i            | int                   | 整数型           |            4 | (3)      |
#	  | I            | unsigned int          | 整数型           |            4 | (3)      |
#	  | l            | long                  | 整数型           |            4 | (3)      |
#	  | L            | unsigned long         | 整数型           |            4 | (3)      |
#	  | q            | long long             | 整数型           |            8 | (2), (3) |
#	  | Q            | unsigned long long    | 整数型           |            8 | (2), (3) |
#	  | f            | float                 | 浮動小数点型     |            4 | (4)      |
#	  | d            | double                | 浮動小数点型     |            8 | (4)      |
#	  | s            | char[] (Cの文字列)    | 文字列           |              |          |
#	  | p            | char[] (Pascal文字列) | 文字列           |              |          |
#	  | P            | void *                | 整数型           |              | (5), (3) |
# 
#         (1) '?' は C99 で定義された _Bool 型に対応。その型が利用できない場合は、char で代用。
#             標準モードでは常に1バイトで表現されます。
#         (2) 'q' および 'Q' は、標準モードでは常に利用可。
#             ネイティブモードでは、C コンパイラが long long 型をサポートする場合、または
#              Windows では __int64 をサポートする場合にのみ利用可。
#         (3) 非整数をパックしようとするとき、__index__() メソッド (なければ __int__() メソッド) が使われる。
#             ただし、 __int__() の使用は非推奨で、 DeprecationWarning を送出します。
#         (4) 'f' および 'd' のパック表現は、プラットフォームにおける浮動小数点数のフォーマットに関係なく、
#             IEEE 754 binary32 ('f' の場合) または binary64 ('d' の場合) フォーマット。
#         (5) 'P' フォーマット文字はネイティブバイトオーダでのみ利用可能 
#             (デフォルトのネットワークバイトオーダに設定するか、 '@' を指定しなければならない)。

# 備考: バイトオーダーとして '@' を用いる場合, 
#       C コンパイラが用いるルールに従い、
#       必要に応じて数バイトのパディングを入れる.
#       また, サイズは C コンパイラの sizeof 式で決定する.