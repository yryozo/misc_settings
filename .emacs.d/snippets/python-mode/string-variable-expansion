# -*- coding: utf-8; mode: snippet -*-
# name: string-format (文字列中での変数展開, 桁あわせ/0埋め(zero filling), variable expansion, variable substitution, variable interpolation,  sprintf, format, stringstream, StringBuffer, )
# key: string-format
# --
"{hoge}={fuga.foo},{bar[0]}={baz[aaa]}".format(**vars())      # 文字列中で {変数名}, {変数名.フィールド}, {変数名[インデックスorキー]} という書式で指定
# "{hoge}={fuga.foo},{bar[0]}={baz[aaa]}".format(**locals())    # 上と同様
# "{hoge}={fuga.foo},{bar[0]}={baz[aaa]}".format(**globals())   # グローバル変数を展開する場合

### 引数の指定方法
# "{0},{1},{0},{2}".format("hoge", 42, 3.14)  # {引数番号} で指定
# "{},{}".format("hoge", 42)                  # 引数を順に一度ずつしか使わないなら {} も可 (Python 2.7 以降)
# '{language} has {number} quote types'.format(language='Python', number=2)  # キーワードで指定.
# 'Coordinates: {latitude}, {longitude}'.format(**coord)       # キーワードの場合, 辞書の展開(引数リストのアンパック)も利用可
# 'The story of {0}, {1}, and {other}.'.format('Bill', 'Manfred', other='Georg')  # キーワードと引数番号の組み合わせ
# 
### 文字列化の方法指定
# 'The value of PI is approximately {0!r}.'.format(math.pi)  # デフォルトでは __format__() で文字列化される. !r をつけると repr() が, !s なら str() が使われる.
# 
### 型指定/桁指定
# "{:+}".format(5)      # (整数) 正数の場合でも符号をつける('+')
# "{:4}".format(5)      # (整数) 最低でも4桁分のスペースを確保
# "{:04}".format(5)     # (整数) 最低でも4桁分のスペースを確保. 余った部分は空白ではなく zero fill.
# # <= それぞれ, 整数型の 'd' を明示してもいい  ("{:+d}", "{:4d}", "{:04d}")
# #    (つけた方が読み手には優しい?)
# # <= 引数番号やキーワードを指定する場合は ':' の前.  ("{0:+d}", "{hoge:4d}")
# 
# "{:f}".format(12.3456)     # (浮動少数点) 'f'は固定少数表記 (=指数表記ではない普通の表記). 
# "{:+f}".format(12.3456)    #   (浮動少数点) 正数の場合でも符号をつける('+').
# "{:6.2f}".format(12.3456)  #   (浮動少数点) 最低でも6文字分のスペースを確保. 小数点以下は2桁.
# "{:06.2f}".format(12.3456) #   (浮動少数点) 最低でも6文字分のスペースを確保. 小数点以下は2桁. 余った部分は空白ではなく zero fill.
# "{:e}".format(12.3456)     # (浮動少数点) 'e'は指数表記.
# "{:+e}".format(12.3456)    #   (浮動少数点) 正数の場合でも符号をつける('+').
# "{:9.2e}".format(12.3456)  #   (浮動少数点) 最低でも9文字分のスペースを確保. 小数点以下は2桁.
# "{:09.2e}".format(12.3456) #   (浮動少数点) 最低でも9文字分のスペースを確保. 小数点以下は2桁. 余った部分は空白ではなく zero fill.
# # <= 引数番号やキーワードを指定する場合は ':' の前.  ("{0:+f}", "{hoge:9.2e}")
# 
# 
# 書式の詳細: (See: 7.1.3 書式指定文字列の文法)
#   { 引数番号orキーワード(.フィールド名or[インデックスorキー])(省略可) !rまたは!s(省略可) :型指定/桁指定(省略可) }
# 
#   型指定/桁指定の部分は以下の通り:
#     [[fill]align][sign][#][0][width][,][.precision][type]
#     * fill 及び align
#       最小フィールド幅(width)が指定されている場合のみ意味があるパラメータ.
#       どう詰めるか, 及び開いたスペースをどう埋めるか, を指定.
#       * align に指定できるのは, '<', '>', '^', '=' の4種. 
#         それぞれ, 左詰め(ほとんどはこれがデフォルト), 右詰め, 中央揃え, 符号があるなら(signが指定されているなら)符号を先頭に書いて後ろを右詰め(これは数値型にのみ意味がある指定. "+  1" とか "+0042" みたいな表記になる).
#       * fill に指定できるのは, '{''}' 以外の任意の一文字.  (例えば 0 なら zero fill が実現可)
#     * sign
#       数値型にのみ意味があるパラメータ.
#       符号をどう表示するか, を指定.
#       指定できるのは, '+', '-', ' ' の3種. 
#       それぞれ, 正数/負数に'+''-'をつける, 負数にのみ'-'をつける, 正数/負数に' (空白)''-'をつける.
#     * #
#       数値型で, かつtypeで2進数or8進数or16進数と指定された場合にのみ意味があるパラメータ.
#       '#'がついていた場合, 先頭に '0b', '0o', '0x' をつける.
#     * 0 及び width
#       最小フィールド幅(width)が指定するパラメータ.
#       0 からスタートしていた場合は zero fill になる (alignment が '=', fill が '0' と等価).
#     * ,
#       数値型にのみ意味があるパラメータ.
#       ','がついていた場合, 千の位のセパレータとしてカンマを付与して表示. 
#       (注: ロケール依存のセパレータを使いたい場合は, 代わりに type の 'n' を使用)
#     * .precision
#       浮動小数点数の小数点以下の桁数, あるいは最大フィールド幅を指定.
#       * 浮動小数点数の場合 (= type が 'f', 'F', 'g', 'G' の場合) , 小数点以下の桁数を指定.
#       * 整数型の場合は, 使用できない.
#       * それ以外の場合は, 最大フィールド幅.
#     * type
#       * 文字列型の場合:
#         * 's' 	文字列。デフォルト(なので多くの場合省略される)
#         * 空白 	's' と同じ
#       * 数値(整数)の場合:
#         * 'b' 	2進数
#         * 'c' 	文字 (数値に対応するユニコード文字)
#         * 'd' 	10進数
#         * 'o' 	8進数
#         * 'x' 	16進数 (アルファベット部分は小文字)
#         * 'X' 	16進数 (アルファベット部分は大文字)
#         * 'n' 	数値 (ただし, 現在のロケールに従って(1000毎などに)区切り文字を挿入)
#         * 空白 	'd' と同じ
#       * 数値(整数, 浮動小数点数, 10進数)の場合:
#         * 'e' 	指数表記 (1.2e+06 と言った表示)
#         * 'E' 	指数表記 ('e' と同じだが, 大文字の 'E' を使用)
#         * 'f' 	固定小数点数 (= 普通の表記)
#         * 'F' 	固定小数点数 ('f' と同じ)
#         * 'g' 	標準フォーマット. 桁に応じて固定小数点と指数表記を使い分ける.
#         * 'G' 	標準フォーマット ('g' と同じだが, 大文字 'E' を使用し, 無限大と NaN も大文字)
#         * 'n' 	数値. (ただし, 現在のロケールに従って区切り文字を挿入)
#         * '%' 	パーセンテージ. 数値を 100 倍し, 固定小数点数フォーマット ('f') でパーセント記号付きで表示.
#         * None 	'g' と同じ
# 
# 備考: '{'や'}' をエスケープしたい場合は, '{{', '}}' と2連続させる.
# 備考: 独自クラスは, 上記とは異なる書式/パラメータに対応しているかもしれない (__format__() のオーバーライド内容でなんとでもできる)

###  % 演算子の例
# "%s is %d" % ("hoge", 42)  # (Python 2 only) 

###  f文字列の例
# f"a+b={a+b}"

# 備考: format() は Python 3.x 及び Python 2.6 以降.
# 備考: format() より一つ古い仕組みとして string.Template クラスもある. '{''}' をエスケープしなくてよいので場合によっては便利かも. (詳細略)
# 備考: % 演算子は Python 3 では非推奨. 書式は C の printf と同じで, 独自クラスには対応できない.
# 備考: f文字列は, Python 3.6 以降.