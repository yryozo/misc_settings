# -*- coding: utf-8; mode: snippet -*-
# name: import (モジュール(module)/パッケージ(package)のインポート, from,  library, #include, require)
# key: import
# group : general
# --
import ${1:pkg1.pkg2.modname}${2: as ${3:M}}  # $1 を import (フルパスを書かなくても $3.hogehoge という形で中身にアクセス可)
# import $1                                 # フルパス書いていいなら as ... は不要 (アクセスは $1.hogehoge といった形で行う)
# from pkg1.pkg2 import modname             # フルパス書くのが嫌なら, モジュールだけ import, ということも可. (modname.hogehoge といった形でアクセス可)
# from pkg1.pkg2.modname import hoge, fuga  # モジュール名さえ書くのが嫌なら, 必要な関数/変数だけを取り込む(現在の名前空間上に展開する)こともできる
# from pkg1.pkg2.modname import *           # 無制限に, モジュール内の全ての(アンダースコア (_) で開始しない)関数/変数を取り込むこともできる (注: あまり使わないこと. 何が定義されるかわからないので可読性が悪くなり, ライブラリのバージョンが変わって変数が増えた際など意図せず衝突するおそれがある)
# from pkg1.pkg2 import *                   # 無制限に, パッケージ内の全てのモジュールを import, というのはデフォルトではできない (モジュール作者が __init__.py の中で __all__ を設定してくれていれば, そこに指定されているモジュールが読み込める)
# from . import hoge                        # 同じパッケージ内のモジュール間で import しあう場合, 絶対パス以外に, 相対パスでも指定可能 (ただし, メインモジュールとして呼び込まれた場合はモジュール名は "__main__" になってしまい使えないので, 他からimportされるだけのモジュール用)
# from ..hoge import fuga                   # (同上)
# import hoge                               # (Python 2 only) 同じパッケージ内のモジュール間で import しあう場合, "from ." 等と起点を明示しなくても相対パスでも指定可能.

# 備考: モジュールはファイルと一対一対応 (1ファイル = 1モジュール).
#       モジュール名は, ファイル名から'py'を除いたもの.
# 備考: パッケージはディレクトリと一対一対応 (1ディレクトリ = 1パッケージ).
#       パッケージ名は, ディレクトリ名と同じ.
# 備考: 各モジュールには, 自動的に, モジュール名を示す __name__ という変数が定義される.
#       python コマンドにメインファイルとして指定した場合, "__main__" が束縛される.
#         (= __main__ という名前のモジュール(トップレベルのスクリプト環境)として読み込まれる)
#       import した場合は, そのモジュール名の文字列が束縛されている.
# 備考: モジュールは, PYTHONPATH の通ったところにおいておくこと