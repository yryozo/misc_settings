# -*- coding: utf-8; mode: snippet -*-
# name : file/directory: ファイルの読み書き処理 (各行に対する繰り返し(iteration over each line), 読み込み(read), 書き込み(write), )
# --
with open(${1:'fuga/hoge.txt'}, '${2:rt}', encoding='${3:utf-8}') as ${4:file}:
    for ${5:line} in $4:
        print $5
# 注意: Python 2 の open() は, io モジュールのものではないので, encoding を受け取れない.
#       Python 3 互換にしたければ  "from io import open"  しておく.
#       あるいは, 後で自力で decode する.
#         f = open($1)
#         data = f.read()              # as bytes
#         text = data.decode('utf-8')  # unicode, not bytes
# 備考: with を使用すると, 自動で閉じてくれるため close 忘れが出ない.
# 備考: 明示的に close するなら, 例えば以下のようにしてもいい.
#       $4 = open($1, $2, encoding=$3)
#       for $5 in $4
#         print $5
#       $4.close()
# 
# 備考: 組み込み関数 open() が返すのは, Python 2 の場合は, 古くからある file オブジェクト.
#       Python 3 では, 新しい io モジュールのオブジェクト.
#       どちらも iterator インターフェースを備え, 行ごとに iterate できるようになっている.
# 備考: 一気に全部読みたい場合は以下のようにすればいい
#         contents = $4.read()
# 備考: 行毎に分割された形式で一気に全部読みたい場合は, 以下のようにすればいい
#         lines = list($4)    # あるいは $4.readlines()
#       ただ, iterator 形式のほうが便利かもしれない.
#         lineitr = iter($4)
#       (なお, バイナリモードでも行単位の読み込みはできる. '\n'を改行文字として結果を返してくれる)
# 備考: 1行だけ読みたい場合は, 以下のようにすればいい
#         line = $4.readline()
# 備考: 指定のバイト数(or文字数)だけ読みたい場合は, 以下のようにすればいい 
#       (なお, Python 3 のテキストモードの場合, 文字数であってバイト数ではない)
#         text = $4.read(42)
# 備考: read()/readline() ともに, 改行文字を勝手には切り取らない(= 終端に達するまでは少なくとも改行文字が含まれるので空文字列ではない). 終端に達したら空文字列を返す.
# 
# 備考: encodingを省略した場合, 実行環境のデフォルトエンコーディングが使用される
#       (Windows なら CP-1252, 等).
#       挙動が環境依存になるので, 常に指定したほうがよい.
# 
# 備考: パスの区切り文字は, 実行環境によらず '/' でよい. (See: Dive Into Python 3)
# 備考: オープンのモードは, 読み書きの可否や, テキストかバイナリ列か, などを指定する.
#       テキストとバイナリは, Python 2 では大して違わない(※1)が, 
#       Python 3 では, 全ての読み書きで encoding に沿った変換が入るのでかなり違う.
#       (※1: Windows環境の時に改行文字の変換処理が入るか否か程度. 読んだ際に'\r\n'を'\n'にし, 書き込み時に戻す)
#       デフォルトは 'rt' (テキストモードで読み込みonly).
#         * 'r' -- 読み込み専用
#         * 'w' -- 書き込み専用  (ファイルは 0 に切り詰められる. まだ存在しなければ自動で作成する)
#         * 'a' -- 書き込み専用(追記)  (一部のUNIXで seek 位置に関係なく末尾に追記されるモード. まだ存在しなければ自動で作成する)
#         * 't' -- テキストとして開く
#         * 'b' -- バイナリ列として開く
#         * '+' -- 更新用に開く (読み込み／書き込み)
#         * 'U' -- ユニバーサルニューラインモード (後方互換性のためのモード. 新規コードでは使わない)
# 
# 備考: 書き込みは write(). 書き込まれた文字数が返り値として返される.
#   num = $4.write(string or bytes)
#
# 備考: 現在位置をずらすなら seek(), 現在位置の取得は tell(). 
#       なおこれらはバイト単位で指定するため, Python 3 のテキストモードの場合は変なところに seek() しないよう注意.
#   $4.seek(0)
#   pos = $4.tell()

# 注意: os モジュールにも open() が定義されているため, "from os import *" と書くと, 組み込み関数の open() が隠蔽されることに注意.
