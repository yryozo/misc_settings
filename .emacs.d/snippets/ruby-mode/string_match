# -*- coding: utf-8; mode: snippet -*-
# name : string match (正規表現マッチ, regexp)
# key : match
# --
if ${3:mm} = ${1:str}.match(/${2: (\S+) }/)
  m0 = $3[0]
  m1 = $3[1]
  $0
end
# 備考: マッチ失敗時には match() は nil を返すため, if の中は実行されない
# 備考: $3[0] で,マッチした箇所全体の文字列が取得できる.
#       $3[1] で,正規表現中で(..)でキャプチャした最初の部分が取得できる.
# 
# 備考: 1.9 以降ではブロックを受け取る match メソッドが有り, 以下のようにも書ける.
#       $1.match(/$2/) do |$3|
#         puts $3[0]
#       end
# 
# 備考: 最後に m を付けると複数行マッチモード
#       * "\A" は文字列の先頭にマッチ, "\Z" は文字列の末尾にマッチ
#       * "^"  は行頭にマッチ, "$" は行末にマッチ
#       * "$." は改行文字にマッチ
#       * ".+?" は最短マッチ (? を付けると最短になるらしい)
# 
#         m = texts.match(/\A(.*?)^<< ([^ ]+) ([^ ]+) >>$.(.*)\Z/m);